from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, CallbackQuery
from aiogram import F, Router

import config
from config import admin
import sqlite3
import app.keyboards as kb
import asyncio
from config import TOKEN
from aiogram import Bot
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import app.db as db

bot = Bot(token=TOKEN)

router = Router()


class Sender(StatesGroup):
    textmsg = State()

class Movie (StatesGroup):
    deletemovieid = State()
    addmoviename = State()
    addmoviedescription = State()

class Channel (StatesGroup):
    addchannelid = State()
    addchannelname = State()
    addchannellink = State()
    deletechannelid = State()

async def check_sub_channels(channels, user_id):
    for channel in channels:
        chat_member = await  bot.get_chat_member(chat_id=channel[0], user_id=user_id)
        if chat_member.status == 'left':
            return False
    return True


@router.message(CommandStart())
async def cmd_start(message: Message):
    if message.from_user.id == admin:
        await  message.answer(text=f'–í–æ—Ç —Ç–≤–æ—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å–∫–∞', reply_markup=kb.admin)

    if await check_sub_channels(await db.get_channels(), message.from_user.id) or message.from_user.id == admin:
        await  message.answer(text=f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, <b>{message.from_user.first_name}</b>, —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –±–æ—Ç–µ –¥–ª—è '
                               f'–ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∫–æ–¥—É, –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è /search –∫–æ–¥_—Ñ–∏–ª—å–º–∞',parse_mode='HTML')
    else:
        await bot.send_message(message.from_user.id, "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤!",
                                   reply_markup=await kb.showChannels())
    await db.create_db()
    await db.add_user(message.from_user.id)



@router.message(Command("search"))
async def search(message:Message, command: CommandObject):
    if await check_sub_channels(await db.get_channels(), message.from_user.id) or message.from_user.id == admin:
        await message.answer(f"{await db.get_movie_data_as_string(command.args)}", parse_mode='HTML')
    else:
        await bot.send_message(message.from_user.id, "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤!",
                               reply_markup=await kb.showChannels())

@router.message(Command('send'))
async def settext(message: Message, state: FSMContext):
    if await check_sub_channels(await db.get_channels(), message.from_user.id):
        await state.set_state(Sender.textmsg)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')
    else:
        await bot.send_message(message.from_user.id, "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤!", reply_markup=await kb.showChannels())

@router.callback_query(F.data == "subchanneldone")
async def subchanneldone(callback: CallbackQuery):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    if await check_sub_channels(await db.get_channels(), callback.from_user.id):
        await bot.send_message(callback.from_user.id, "–£—Å–ø–µ—Ö! –î–ª—è –ø–æ–∏—Å–∫–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è /search –∫–æ–¥_—Ñ–∏–ª—å–º–∞")
    else:
        await bot.send_message(callback.from_user.id, "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤!", reply_markup=await kb.showChannels())

@router.callback_query(F.data == "stats")
async def stats(callback: CallbackQuery):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    totaluser = await db.get_total_user_count()
    todayuser = await db.get_users_joined_today_count()
    await bot.send_message(callback.from_user.id, f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {todayuser} \n "
                                                  f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {totaluser}", reply_markup=kb.admin)

@router.callback_query(F.data == "channel_panel")
async def channel_panel(callback: CallbackQuery):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, f"{await db.get_channels_data_as_string()} ",
                           reply_markup=kb.channels, parse_mode='HTML')

@router.callback_query(F.data == "movies")
async def movies(callback: CallbackQuery):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, f"–ú–µ–Ω—é —Ñ–∏–ª—å–º–æ–≤ üé¨", reply_markup=kb.movies)

@router.callback_query(F.data == "movies_list")
async def movies_list(message: Message):
    await bot.send_message(message.from_user.id, f"{await db.get_movies_data_as_string()} ",
                           reply_markup=kb.movies, parse_mode='HTML')

@router.callback_query(F.data == "delete_movie")
async def delete_movie(message: Message, state: FSMContext):
    await state.set_state(Movie.deletemovieid)
    await message.message.answer('–í–≤–µ–¥–∏—Ç–µ id —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å')

@router.message(Movie.deletemovieid)
async def del_movie(message: Message, state: FSMContext):
    await state.update_data(deletemovieid=message.text)
    data = await state.get_data()
    try:
        await db.delete_movie(data)
        await message.answer('–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
    except Exception as e:
        await message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞')


@router.callback_query(F.data == "delete_channel")
async def delete_channel(message: Message, state: FSMContext):
    await state.set_state(Channel.deletechannelid)
    await message.message.answer('–í–≤–µ–¥–∏—Ç–µ id –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å')

@router.message(Channel.deletechannelid)
async def del_channel(message: Message, state: FSMContext):
    await state.update_data(deletechannelid=message.text)
    data = await state.get_data()
    try:
        await db.delete_channel(data)
        await message.answer('–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
    except Exception as e:
        await message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞')

@router.callback_query(F.data == "add_channel")
async def add_channel(message: Message, state: FSMContext):
    await state.set_state(Channel.addchannelid)
    await message.message.answer('–í–≤–µ–¥–∏—Ç–µ id –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å, —É–±–µ–¥–∏—Ç–µ—Å—å, '
                                 '—á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ!')

@router.message(Channel.addchannelid)
async def add_channel_id(message: Message, state: FSMContext):
    await state.update_data(addchannelid=message.text)
    await state.set_state(Channel.addchannelname)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')

@router.message(Channel.addchannelname)
async def add_channel_name(message: Message, state: FSMContext):
    await state.update_data(addchannelname=message.text)
    await state.set_state(Channel.addchannellink)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://t.me/example')

@router.message(Channel.addchannellink)
async def add_channel_link(message: Message, state: FSMContext):
    await state.update_data(addchannellink=message.text)
    data = await state.get_data()
    await state.clear()
    try:
        await db.add_channel(data)
        await message.answer('–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
    except Exception as e:
        await message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞')

@router.callback_query(F.data == "add_movie")
async def add_movie(message: Message, state: FSMContext):
    await state.set_state(Movie.addmoviename)
    await message.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞')

@router.message(Movie.addmoviename)
async def add_movie_name(message: Message, state: FSMContext):
    await state.update_data(addmoviename=message.text)
    await state.set_state(Movie.addmoviedescription)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–∏–ª—å–º—É')

@router.message(Movie.addmoviedescription)
async def add_movie_description(message: Message, state: FSMContext):
    await state.update_data(addmoviedescription=message.text)
    data = await state.get_data()
    await state.clear()
    try:
        await db.add_movie(data)
        await message.answer('–§–∏–ª—å–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
    except Exception as e:
        await message.answer(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞ {e}')








